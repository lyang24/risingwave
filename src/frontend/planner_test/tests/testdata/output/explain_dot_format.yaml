# This file is automatically generated. See `src/frontend/planner_test/README.md` for more information.
- name: test dot output format (logical)
  sql: |
    CREATE TABLE t (v1 int);
    explain (logical, format dot) SELECT approx_percentile(0.5) WITHIN GROUP (order by v1) from t;
  explain_output: |
    digraph {
        0 [ label = "LogicalAgg\lid: \"2\"\laggs: [\"approx_percentile($expr1)\"]\l" ]
        1 [ label = "LogicalProject\lid: \"1\"\lexprs: [\"t.v1::Float64 as $expr1\"]\l" ]
        2 [ label = "LogicalScan\lid: \"10017\"\ltable: \"t\"\lcolumns: [\"v1\"]\l" ]
        0 -> 1 [ ]
        1 -> 2 [ ]
    }
- name: test dot output format (batch)
  sql: |
    CREATE TABLE t (v1 int);
    explain (physical, format dot) SELECT approx_percentile(0.5) WITHIN GROUP (order by v1) from t;
  explain_output: |
    digraph {
        0 [ label = "BatchSimpleAgg\lid: \"3\"\laggs: [\"approx_percentile($expr1)\"]\l" ]
        1 [ label = "BatchExchange\lid: \"2\"\lorder: []\ldist: \"Single\"\l" ]
        2 [ label = "BatchProject\lid: \"1\"\lexprs: [\"t.v1::Float64 as $expr1\"]\l" ]
        3 [ label = "BatchScan\lid: \"10033\"\ltable: \"t\"\lcolumns: [\"v1\"]\l" ]
        0 -> 1 [ ]
        1 -> 2 [ ]
        2 -> 3 [ ]
    }
- name: test dot output format (stream)
  sql: |
    CREATE TABLE t (v1 int);
    explain (physical, format dot) create materialized view m1 as SELECT approx_percentile(0.5) WITHIN GROUP (order by v1) from t;
  explain_output: |
    digraph {
        0 [ label = "StreamMaterialize\lid: \"3\"\lcolumns: [\"approx_percentile\"]\lstream_key: []\lpk_columns: []\lpk_conflict: \"NoCheck\"\l" ]
        1 [ label = "StreamGlobalApproxPercentile\lid: \"10046\"\lquantile: \"0.5:Float64\"\lrelative_error: \"0.01:Float64\"\l" ]
        2 [ label = "StreamExchange\lid: \"2\"\ldist: \"Single\"\l" ]
        3 [ label = "StreamLocalApproxPercentile\lid: \"10044\"\lpercentile_col: \"$expr1\"\lquantile: \"0.5:Float64\"\lrelative_error: \"0.01:Float64\"\l" ]
        4 [ label = "StreamProject\lid: \"1\"\lexprs: [\"t.v1::Float64 as $expr1\",\"t._row_id\"]\l" ]
        5 [ label = "StreamTableScan\lid: \"10049\"\ltable: \"t\"\lcolumns: [\"v1\",\"_row_id\"]\l" ]
        0 -> 1 [ ]
        1 -> 2 [ ]
        2 -> 3 [ ]
        3 -> 4 [ ]
        4 -> 5 [ ]
    }
- name: test long dot output format (stream)
  sql: |
    create table t1(a int, b int);
    create table t2(c int primary key, d int);
    explain (physical, format dot) create materialized view m1 as SELECT
    COALESCE((SELECT b FROM t2 WHERE t1.a = t2.c), 0) col1,
    COALESCE((SELECT b FROM t2 WHERE t1.a = t2.c), 0) col2,
    COALESCE((SELECT b FROM t2 WHERE t1.a = t2.c), 0) col3,
    COALESCE((SELECT b FROM t2 WHERE t1.a = t2.c), 0) col4,
    COALESCE((SELECT b FROM t2 WHERE t1.a = t2.c), 0) col5,
    COALESCE((SELECT b FROM t2 WHERE t1.a = t2.c), 0) col6,
    COALESCE((SELECT b FROM t2 WHERE t1.a = t2.c), 0) col7,
    COALESCE((SELECT b FROM t2 WHERE t1.a = t2.c), 0) col8,
    COALESCE((SELECT b FROM t2 WHERE t1.a = t2.c), 0) col9,
    COALESCE((SELECT b FROM t2 WHERE t1.a = t2.c), 0) col10,
    COALESCE((SELECT b FROM t2 WHERE t1.a = t2.c), 0) col11,
    COALESCE((SELECT b FROM t2 WHERE t1.a = t2.c), 0) col12,
    COALESCE((SELECT b FROM t2 WHERE t1.a = t2.c), 0) col13,
    COALESCE((SELECT b FROM t2 WHERE t1.a = t2.c), 0) col14,
    COALESCE((SELECT b FROM t2 WHERE t1.a = t2.c), 0) col15,
    COALESCE((SELECT b FROM t2 WHERE t1.a = t2.c), 0) col16,
    COALESCE((SELECT b FROM t2 WHERE t1.a = t2.c), 0) col17,
    COALESCE((SELECT b FROM t2 WHERE t1.a = t2.c), 0) col18
    from t1;
  explain_output: |
    digraph {
        0 [ label = "StreamMaterialize\lid: \"147\"\lcolumns: [\"col1\",\"col2\",\"col3\",\"col4\",\"col5\",\"col6\",\"col7\",\"col8\",\"col9\",\"col10\",\"col11\",\"col12\",\"col13\",\"col14\",\"col15\",\"col16\",\"col17\",\"col18\",\"t1._row_id(hidden)\",\"t1.b(hidden)\",\"t1.a(hidden)\",\"t1.b#1(hidden)\",\"t1.b#2(hidden)\",\"t1.b#3(hidden)\",\"t1.b#4(hidden)\",\"t1.b#5(hidden)\",\"t1.b#6(hidden)\",\"t1.b#7(hidden)\",\"t1.b#8(hidden)\",\"t1.b#9(hidden)\",\"t1.b#10(hidden)\",\"t1.b#11(hidden)\",\"t1.b#12(hidden)\",\"t1.b#13(hidden)\",\"t1.b#14(hidden)\",\"t1.b#15(hidden)\",\"t1.b#16(hidden)\",\"t1.b#17(hidden)\",\"t1.b#18(hidden)\"]\lstream_key: [\"t1._row_id\",\"t1.b\",\"t1.a\",\"t1.b#1\",\"t1.b#2\",\"t1.b#3\",\"t1.b#4\",\"t1.b#5\",\"t1.b#6\",\"t1.b#7\",\"t1.b#8\",\"t1.b#9\",\"t1.b#10\",\"t1.b#11\",\"t1.b#12\",\"t1.b#13\",\"t1.b#14\",\"t1.b#15\",\"t1.b#16\",\"t1.b#17\",\"t1.b#18\"]\lpk_columns: [\"t1._row_id\",\"t1.b\",\"t1.a\",\"t1.b#1\",\"t1.b#2\",\"t1.b#3\",\"t1.b#4\",\"t1.b#5\",\"t1.b#6\",\"t1.b#7\",\"t1.b#8\",\"t1.b#9\",\"t1.b#10\",\"t1.b#11\",\"t1.b#12\",\"t1.b#13\",\"t1.b#14\",\"t1.b#15\",\"t1.b#16\",\"t1.b#17\",\"t1.b#18\"]\lpk_conflict: \"NoCheck\"\l" ]
        1 [ label = "StreamProject\lid: \"146\"\lexprs: [\"Coalesce(t1.b, 0:Int32) as $expr1\",\"Coalesce(t1.b, 0:Int32) as $expr2\",\"Coalesce(t1.b, 0:Int32) as $expr3\",\"Coalesce(t1.b, 0:Int32) as $expr4\",\"Coalesce(t1.b, 0:Int32) as $expr5\",\"Coalesce(t1.b, 0:Int32) as $expr6\",\"Coalesce(t1.b, 0:Int32) as $expr7\",\"Coalesce(t1.b, 0:Int32) as $expr8\",\"Coalesce(t1.b, 0:Int32) as $expr9\",\"Coalesce(t1.b, 0:Int32) as $expr10\",\"Coalesce(t1.b, 0:Int32) as $expr11\",\"Coalesce(t1.b, 0:Int32) as $expr12\",\"Coalesce(t1.b, 0:Int32) as $expr13\",\"Coalesce(t1.b, 0:Int32) as $expr14\",\"Coalesce(t1.b, 0:Int32) as $expr15\",\"Coalesce(t1.b, 0:Int32) as $expr16\",\"Coalesce(t1.b, 0:Int32) as $expr17\",\"Coalesce(t1.b, 0:Int32) as $expr18\",\"t1._row_id\",\"t1.b\",\"t1.a\",\"t1.b\",\"t1.b\",\"t1.b\",\"t1.b\",\"t1.b\",\"t1.b\",\"t1.b\",\"t1.b\",\"t1.b\",\"t1.b\",\"t1.b\",\"t1.b\",\"t1.b\",\"t1.b\",\"t1.b\",\"t1.b\",\"t1.b\",\"t1.b\"]\l" ]
        2 [ label = "StreamHashJoin\lid: \"145\"\ltype: \"LeftOuter\"\lpredicate: \"t1.a IS NOT DISTINCT FROM t1.a AND t1.b IS NOT DISTINCT FROM t1.b\"\l" ]
        3 [ label = "StreamHashJoin\lid: \"137\"\ltype: \"LeftOuter\"\lpredicate: \"t1.a IS NOT DISTINCT FROM t1.a AND t1.b IS NOT DISTINCT FROM t1.b\"\l" ]
        4 [ label = "StreamHashJoin\lid: \"129\"\ltype: \"LeftOuter\"\lpredicate: \"t1.a IS NOT DISTINCT FROM t1.a AND t1.b IS NOT DISTINCT FROM t1.b\"\l" ]
        5 [ label = "StreamHashJoin\lid: \"121\"\ltype: \"LeftOuter\"\lpredicate: \"t1.a IS NOT DISTINCT FROM t1.a AND t1.b IS NOT DISTINCT FROM t1.b\"\l" ]
        6 [ label = "StreamHashJoin\lid: \"113\"\ltype: \"LeftOuter\"\lpredicate: \"t1.a IS NOT DISTINCT FROM t1.a AND t1.b IS NOT DISTINCT FROM t1.b\"\l" ]
        7 [ label = "StreamHashJoin\lid: \"105\"\ltype: \"LeftOuter\"\lpredicate: \"t1.a IS NOT DISTINCT FROM t1.a AND t1.b IS NOT DISTINCT FROM t1.b\"\l" ]
        8 [ label = "StreamHashJoin\lid: \"97\"\ltype: \"LeftOuter\"\lpredicate: \"t1.a IS NOT DISTINCT FROM t1.a AND t1.b IS NOT DISTINCT FROM t1.b\"\l" ]
        9 [ label = "StreamHashJoin\lid: \"89\"\ltype: \"LeftOuter\"\lpredicate: \"t1.a IS NOT DISTINCT FROM t1.a AND t1.b IS NOT DISTINCT FROM t1.b\"\l" ]
        10 [ label = "StreamHashJoin\lid: \"81\"\ltype: \"LeftOuter\"\lpredicate: \"t1.a IS NOT DISTINCT FROM t1.a AND t1.b IS NOT DISTINCT FROM t1.b\"\l" ]
        11 [ label = "StreamHashJoin\lid: \"73\"\ltype: \"LeftOuter\"\lpredicate: \"t1.a IS NOT DISTINCT FROM t1.a AND t1.b IS NOT DISTINCT FROM t1.b\"\l" ]
        12 [ label = "StreamHashJoin\lid: \"65\"\ltype: \"LeftOuter\"\lpredicate: \"t1.a IS NOT DISTINCT FROM t1.a AND t1.b IS NOT DISTINCT FROM t1.b\"\l" ]
        13 [ label = "StreamHashJoin\lid: \"57\"\ltype: \"LeftOuter\"\lpredicate: \"t1.a IS NOT DISTINCT FROM t1.a AND t1.b IS NOT DISTINCT FROM t1.b\"\l" ]
        14 [ label = "StreamHashJoin\lid: \"49\"\ltype: \"LeftOuter\"\lpredicate: \"t1.a IS NOT DISTINCT FROM t1.a AND t1.b IS NOT DISTINCT FROM t1.b\"\l" ]
        15 [ label = "StreamHashJoin\lid: \"41\"\ltype: \"LeftOuter\"\lpredicate: \"t1.a IS NOT DISTINCT FROM t1.a AND t1.b IS NOT DISTINCT FROM t1.b\"\l" ]
        16 [ label = "StreamHashJoin\lid: \"33\"\ltype: \"LeftOuter\"\lpredicate: \"t1.a IS NOT DISTINCT FROM t1.a AND t1.b IS NOT DISTINCT FROM t1.b\"\l" ]
        17 [ label = "StreamHashJoin\lid: \"25\"\ltype: \"LeftOuter\"\lpredicate: \"t1.a IS NOT DISTINCT FROM t1.a AND t1.b IS NOT DISTINCT FROM t1.b\"\l" ]
        18 [ label = "StreamHashJoin\lid: \"17\"\ltype: \"LeftOuter\"\lpredicate: \"t1.a IS NOT DISTINCT FROM t1.a AND t1.b IS NOT DISTINCT FROM t1.b\"\l" ]
        19 [ label = "StreamHashJoin\lid: \"9\"\ltype: \"LeftOuter\"\lpredicate: \"t1.a IS NOT DISTINCT FROM t1.a AND t1.b IS NOT DISTINCT FROM t1.b\"\l" ]
        20 [ label = "StreamExchange\lid: \"1\"\ldist: \"HashShard(t1.a)\"\l" ]
        21 [ label = "StreamTableScan\lid: \"12914\"\ltable: \"t1\"\lcolumns: [\"a\",\"b\",\"_row_id\"]\l" ]
        22 [ label = "StreamProject\lid: \"8\"\lexprs: [\"t1.a\",\"t1.b\",\"t1.b\"]\l" ]
        23 [ label = "StreamHashJoin\lid: \"7\"\ltype: \"Inner\"\lpredicate: \"t1.a = t2.c\"\l" ]
        24 [ label = "StreamExchange\lid: \"5\"\ldist: \"HashShard(t1.a)\"\l" ]
        25 [ label = "StreamProject\lid: \"4\"\lexprs: [\"t1.a\",\"t1.b\"]\l" ]
        26 [ label = "StreamHashAgg\lid: \"3\"\lgroup_key: [\"t1.a\",\"t1.b\"]\laggs: [\"count\"]\l" ]
        27 [ label = "StreamExchange\lid: \"2\"\ldist: \"HashShard(t1.a, t1.b)\"\l" ]
        28 [ label = "StreamTableScan\lid: \"12921\"\ltable: \"t1\"\lcolumns: [\"a\",\"b\",\"_row_id\"]\l" ]
        29 [ label = "StreamExchange\lid: \"6\"\ldist: \"HashShard(t2.c)\"\l" ]
        30 [ label = "StreamTableScan\lid: \"12927\"\ltable: \"t2\"\lcolumns: [\"c\"]\l" ]
        31 [ label = "StreamProject\lid: \"16\"\lexprs: [\"t1.a\",\"t1.b\",\"t1.b\"]\l" ]
        32 [ label = "StreamHashJoin\lid: \"15\"\ltype: \"Inner\"\lpredicate: \"t1.a = t2.c\"\l" ]
        33 [ label = "StreamExchange\lid: \"13\"\ldist: \"HashShard(t1.a)\"\l" ]
        34 [ label = "StreamProject\lid: \"12\"\lexprs: [\"t1.a\",\"t1.b\"]\l" ]
        35 [ label = "StreamHashAgg\lid: \"11\"\lgroup_key: [\"t1.a\",\"t1.b\"]\laggs: [\"count\"]\l" ]
        36 [ label = "StreamExchange\lid: \"10\"\ldist: \"HashShard(t1.a, t1.b)\"\l" ]
        37 [ label = "StreamTableScan\lid: \"12937\"\ltable: \"t1\"\lcolumns: [\"a\",\"b\",\"_row_id\"]\l" ]
        38 [ label = "StreamExchange\lid: \"14\"\ldist: \"HashShard(t2.c)\"\l" ]
        39 [ label = "StreamTableScan\lid: \"12943\"\ltable: \"t2\"\lcolumns: [\"c\"]\l" ]
        40 [ label = "StreamProject\lid: \"24\"\lexprs: [\"t1.a\",\"t1.b\",\"t1.b\"]\l" ]
        41 [ label = "StreamHashJoin\lid: \"23\"\ltype: \"Inner\"\lpredicate: \"t1.a = t2.c\"\l" ]
        42 [ label = "StreamExchange\lid: \"21\"\ldist: \"HashShard(t1.a)\"\l" ]
        43 [ label = "StreamProject\lid: \"20\"\lexprs: [\"t1.a\",\"t1.b\"]\l" ]
        44 [ label = "StreamHashAgg\lid: \"19\"\lgroup_key: [\"t1.a\",\"t1.b\"]\laggs: [\"count\"]\l" ]
        45 [ label = "StreamExchange\lid: \"18\"\ldist: \"HashShard(t1.a, t1.b)\"\l" ]
        46 [ label = "StreamTableScan\lid: \"12953\"\ltable: \"t1\"\lcolumns: [\"a\",\"b\",\"_row_id\"]\l" ]
        47 [ label = "StreamExchange\lid: \"22\"\ldist: \"HashShard(t2.c)\"\l" ]
        48 [ label = "StreamTableScan\lid: \"12959\"\ltable: \"t2\"\lcolumns: [\"c\"]\l" ]
        49 [ label = "StreamProject\lid: \"32\"\lexprs: [\"t1.a\",\"t1.b\",\"t1.b\"]\l" ]
        50 [ label = "StreamHashJoin\lid: \"31\"\ltype: \"Inner\"\lpredicate: \"t1.a = t2.c\"\l" ]
        51 [ label = "StreamExchange\lid: \"29\"\ldist: \"HashShard(t1.a)\"\l" ]
        52 [ label = "StreamProject\lid: \"28\"\lexprs: [\"t1.a\",\"t1.b\"]\l" ]
        53 [ label = "StreamHashAgg\lid: \"27\"\lgroup_key: [\"t1.a\",\"t1.b\"]\laggs: [\"count\"]\l" ]
        54 [ label = "StreamExchange\lid: \"26\"\ldist: \"HashShard(t1.a, t1.b)\"\l" ]
        55 [ label = "StreamTableScan\lid: \"12969\"\ltable: \"t1\"\lcolumns: [\"a\",\"b\",\"_row_id\"]\l" ]
        56 [ label = "StreamExchange\lid: \"30\"\ldist: \"HashShard(t2.c)\"\l" ]
        57 [ label = "StreamTableScan\lid: \"12975\"\ltable: \"t2\"\lcolumns: [\"c\"]\l" ]
        58 [ label = "StreamProject\lid: \"40\"\lexprs: [\"t1.a\",\"t1.b\",\"t1.b\"]\l" ]
        59 [ label = "StreamHashJoin\lid: \"39\"\ltype: \"Inner\"\lpredicate: \"t1.a = t2.c\"\l" ]
        60 [ label = "StreamExchange\lid: \"37\"\ldist: \"HashShard(t1.a)\"\l" ]
        61 [ label = "StreamProject\lid: \"36\"\lexprs: [\"t1.a\",\"t1.b\"]\l" ]
        62 [ label = "StreamHashAgg\lid: \"35\"\lgroup_key: [\"t1.a\",\"t1.b\"]\laggs: [\"count\"]\l" ]
        63 [ label = "StreamExchange\lid: \"34\"\ldist: \"HashShard(t1.a, t1.b)\"\l" ]
        64 [ label = "StreamTableScan\lid: \"12985\"\ltable: \"t1\"\lcolumns: [\"a\",\"b\",\"_row_id\"]\l" ]
        65 [ label = "StreamExchange\lid: \"38\"\ldist: \"HashShard(t2.c)\"\l" ]
        66 [ label = "StreamTableScan\lid: \"12991\"\ltable: \"t2\"\lcolumns: [\"c\"]\l" ]
        67 [ label = "StreamProject\lid: \"48\"\lexprs: [\"t1.a\",\"t1.b\",\"t1.b\"]\l" ]
        68 [ label = "StreamHashJoin\lid: \"47\"\ltype: \"Inner\"\lpredicate: \"t1.a = t2.c\"\l" ]
        69 [ label = "StreamExchange\lid: \"45\"\ldist: \"HashShard(t1.a)\"\l" ]
        70 [ label = "StreamProject\lid: \"44\"\lexprs: [\"t1.a\",\"t1.b\"]\l" ]
        71 [ label = "StreamHashAgg\lid: \"43\"\lgroup_key: [\"t1.a\",\"t1.b\"]\laggs: [\"count\"]\l" ]
        72 [ label = "StreamExchange\lid: \"42\"\ldist: \"HashShard(t1.a, t1.b)\"\l" ]
        73 [ label = "StreamTableScan\lid: \"13001\"\ltable: \"t1\"\lcolumns: [\"a\",\"b\",\"_row_id\"]\l" ]
        74 [ label = "StreamExchange\lid: \"46\"\ldist: \"HashShard(t2.c)\"\l" ]
        75 [ label = "StreamTableScan\lid: \"13007\"\ltable: \"t2\"\lcolumns: [\"c\"]\l" ]
        76 [ label = "StreamProject\lid: \"56\"\lexprs: [\"t1.a\",\"t1.b\",\"t1.b\"]\l" ]
        77 [ label = "StreamHashJoin\lid: \"55\"\ltype: \"Inner\"\lpredicate: \"t1.a = t2.c\"\l" ]
        78 [ label = "StreamExchange\lid: \"53\"\ldist: \"HashShard(t1.a)\"\l" ]
        79 [ label = "StreamProject\lid: \"52\"\lexprs: [\"t1.a\",\"t1.b\"]\l" ]
        80 [ label = "StreamHashAgg\lid: \"51\"\lgroup_key: [\"t1.a\",\"t1.b\"]\laggs: [\"count\"]\l" ]
        81 [ label = "StreamExchange\lid: \"50\"\ldist: \"HashShard(t1.a, t1.b)\"\l" ]
        82 [ label = "StreamTableScan\lid: \"13017\"\ltable: \"t1\"\lcolumns: [\"a\",\"b\",\"_row_id\"]\l" ]
        83 [ label = "StreamExchange\lid: \"54\"\ldist: \"HashShard(t2.c)\"\l" ]
        84 [ label = "StreamTableScan\lid: \"13023\"\ltable: \"t2\"\lcolumns: [\"c\"]\l" ]
        85 [ label = "StreamProject\lid: \"64\"\lexprs: [\"t1.a\",\"t1.b\",\"t1.b\"]\l" ]
        86 [ label = "StreamHashJoin\lid: \"63\"\ltype: \"Inner\"\lpredicate: \"t1.a = t2.c\"\l" ]
        87 [ label = "StreamExchange\lid: \"61\"\ldist: \"HashShard(t1.a)\"\l" ]
        88 [ label = "StreamProject\lid: \"60\"\lexprs: [\"t1.a\",\"t1.b\"]\l" ]
        89 [ label = "StreamHashAgg\lid: \"59\"\lgroup_key: [\"t1.a\",\"t1.b\"]\laggs: [\"count\"]\l" ]
        90 [ label = "StreamExchange\lid: \"58\"\ldist: \"HashShard(t1.a, t1.b)\"\l" ]
        91 [ label = "StreamTableScan\lid: \"13033\"\ltable: \"t1\"\lcolumns: [\"a\",\"b\",\"_row_id\"]\l" ]
        92 [ label = "StreamExchange\lid: \"62\"\ldist: \"HashShard(t2.c)\"\l" ]
        93 [ label = "StreamTableScan\lid: \"13039\"\ltable: \"t2\"\lcolumns: [\"c\"]\l" ]
        94 [ label = "StreamProject\lid: \"72\"\lexprs: [\"t1.a\",\"t1.b\",\"t1.b\"]\l" ]
        95 [ label = "StreamHashJoin\lid: \"71\"\ltype: \"Inner\"\lpredicate: \"t1.a = t2.c\"\l" ]
        96 [ label = "StreamExchange\lid: \"69\"\ldist: \"HashShard(t1.a)\"\l" ]
        97 [ label = "StreamProject\lid: \"68\"\lexprs: [\"t1.a\",\"t1.b\"]\l" ]
        98 [ label = "StreamHashAgg\lid: \"67\"\lgroup_key: [\"t1.a\",\"t1.b\"]\laggs: [\"count\"]\l" ]
        99 [ label = "StreamExchange\lid: \"66\"\ldist: \"HashShard(t1.a, t1.b)\"\l" ]
        100 [ label = "StreamTableScan\lid: \"13049\"\ltable: \"t1\"\lcolumns: [\"a\",\"b\",\"_row_id\"]\l" ]
        101 [ label = "StreamExchange\lid: \"70\"\ldist: \"HashShard(t2.c)\"\l" ]
        102 [ label = "StreamTableScan\lid: \"13055\"\ltable: \"t2\"\lcolumns: [\"c\"]\l" ]
        103 [ label = "StreamProject\lid: \"80\"\lexprs: [\"t1.a\",\"t1.b\",\"t1.b\"]\l" ]
        104 [ label = "StreamHashJoin\lid: \"79\"\ltype: \"Inner\"\lpredicate: \"t1.a = t2.c\"\l" ]
        105 [ label = "StreamExchange\lid: \"77\"\ldist: \"HashShard(t1.a)\"\l" ]
        106 [ label = "StreamProject\lid: \"76\"\lexprs: [\"t1.a\",\"t1.b\"]\l" ]
        107 [ label = "StreamHashAgg\lid: \"75\"\lgroup_key: [\"t1.a\",\"t1.b\"]\laggs: [\"count\"]\l" ]
        108 [ label = "StreamExchange\lid: \"74\"\ldist: \"HashShard(t1.a, t1.b)\"\l" ]
        109 [ label = "StreamTableScan\lid: \"13065\"\ltable: \"t1\"\lcolumns: [\"a\",\"b\",\"_row_id\"]\l" ]
        110 [ label = "StreamExchange\lid: \"78\"\ldist: \"HashShard(t2.c)\"\l" ]
        111 [ label = "StreamTableScan\lid: \"13071\"\ltable: \"t2\"\lcolumns: [\"c\"]\l" ]
        112 [ label = "StreamProject\lid: \"88\"\lexprs: [\"t1.a\",\"t1.b\",\"t1.b\"]\l" ]
        113 [ label = "StreamHashJoin\lid: \"87\"\ltype: \"Inner\"\lpredicate: \"t1.a = t2.c\"\l" ]
        114 [ label = "StreamExchange\lid: \"85\"\ldist: \"HashShard(t1.a)\"\l" ]
        115 [ label = "StreamProject\lid: \"84\"\lexprs: [\"t1.a\",\"t1.b\"]\l" ]
        116 [ label = "StreamHashAgg\lid: \"83\"\lgroup_key: [\"t1.a\",\"t1.b\"]\laggs: [\"count\"]\l" ]
        117 [ label = "StreamExchange\lid: \"82\"\ldist: \"HashShard(t1.a, t1.b)\"\l" ]
        118 [ label = "StreamTableScan\lid: \"13081\"\ltable: \"t1\"\lcolumns: [\"a\",\"b\",\"_row_id\"]\l" ]
        119 [ label = "StreamExchange\lid: \"86\"\ldist: \"HashShard(t2.c)\"\l" ]
        120 [ label = "StreamTableScan\lid: \"13087\"\ltable: \"t2\"\lcolumns: [\"c\"]\l" ]
        121 [ label = "StreamProject\lid: \"96\"\lexprs: [\"t1.a\",\"t1.b\",\"t1.b\"]\l" ]
        122 [ label = "StreamHashJoin\lid: \"95\"\ltype: \"Inner\"\lpredicate: \"t1.a = t2.c\"\l" ]
        123 [ label = "StreamExchange\lid: \"93\"\ldist: \"HashShard(t1.a)\"\l" ]
        124 [ label = "StreamProject\lid: \"92\"\lexprs: [\"t1.a\",\"t1.b\"]\l" ]
        125 [ label = "StreamHashAgg\lid: \"91\"\lgroup_key: [\"t1.a\",\"t1.b\"]\laggs: [\"count\"]\l" ]
        126 [ label = "StreamExchange\lid: \"90\"\ldist: \"HashShard(t1.a, t1.b)\"\l" ]
        127 [ label = "StreamTableScan\lid: \"13097\"\ltable: \"t1\"\lcolumns: [\"a\",\"b\",\"_row_id\"]\l" ]
        128 [ label = "StreamExchange\lid: \"94\"\ldist: \"HashShard(t2.c)\"\l" ]
        129 [ label = "StreamTableScan\lid: \"13103\"\ltable: \"t2\"\lcolumns: [\"c\"]\l" ]
        130 [ label = "StreamProject\lid: \"104\"\lexprs: [\"t1.a\",\"t1.b\",\"t1.b\"]\l" ]
        131 [ label = "StreamHashJoin\lid: \"103\"\ltype: \"Inner\"\lpredicate: \"t1.a = t2.c\"\l" ]
        132 [ label = "StreamExchange\lid: \"101\"\ldist: \"HashShard(t1.a)\"\l" ]
        133 [ label = "StreamProject\lid: \"100\"\lexprs: [\"t1.a\",\"t1.b\"]\l" ]
        134 [ label = "StreamHashAgg\lid: \"99\"\lgroup_key: [\"t1.a\",\"t1.b\"]\laggs: [\"count\"]\l" ]
        135 [ label = "StreamExchange\lid: \"98\"\ldist: \"HashShard(t1.a, t1.b)\"\l" ]
        136 [ label = "StreamTableScan\lid: \"13113\"\ltable: \"t1\"\lcolumns: [\"a\",\"b\",\"_row_id\"]\l" ]
        137 [ label = "StreamExchange\lid: \"102\"\ldist: \"HashShard(t2.c)\"\l" ]
        138 [ label = "StreamTableScan\lid: \"13119\"\ltable: \"t2\"\lcolumns: [\"c\"]\l" ]
        139 [ label = "StreamProject\lid: \"112\"\lexprs: [\"t1.a\",\"t1.b\",\"t1.b\"]\l" ]
        140 [ label = "StreamHashJoin\lid: \"111\"\ltype: \"Inner\"\lpredicate: \"t1.a = t2.c\"\l" ]
        141 [ label = "StreamExchange\lid: \"109\"\ldist: \"HashShard(t1.a)\"\l" ]
        142 [ label = "StreamProject\lid: \"108\"\lexprs: [\"t1.a\",\"t1.b\"]\l" ]
        143 [ label = "StreamHashAgg\lid: \"107\"\lgroup_key: [\"t1.a\",\"t1.b\"]\laggs: [\"count\"]\l" ]
        144 [ label = "StreamExchange\lid: \"106\"\ldist: \"HashShard(t1.a, t1.b)\"\l" ]
        145 [ label = "StreamTableScan\lid: \"13129\"\ltable: \"t1\"\lcolumns: [\"a\",\"b\",\"_row_id\"]\l" ]
        146 [ label = "StreamExchange\lid: \"110\"\ldist: \"HashShard(t2.c)\"\l" ]
        147 [ label = "StreamTableScan\lid: \"13135\"\ltable: \"t2\"\lcolumns: [\"c\"]\l" ]
        148 [ label = "StreamProject\lid: \"120\"\lexprs: [\"t1.a\",\"t1.b\",\"t1.b\"]\l" ]
        149 [ label = "StreamHashJoin\lid: \"119\"\ltype: \"Inner\"\lpredicate: \"t1.a = t2.c\"\l" ]
        150 [ label = "StreamExchange\lid: \"117\"\ldist: \"HashShard(t1.a)\"\l" ]
        151 [ label = "StreamProject\lid: \"116\"\lexprs: [\"t1.a\",\"t1.b\"]\l" ]
        152 [ label = "StreamHashAgg\lid: \"115\"\lgroup_key: [\"t1.a\",\"t1.b\"]\laggs: [\"count\"]\l" ]
        153 [ label = "StreamExchange\lid: \"114\"\ldist: \"HashShard(t1.a, t1.b)\"\l" ]
        154 [ label = "StreamTableScan\lid: \"13145\"\ltable: \"t1\"\lcolumns: [\"a\",\"b\",\"_row_id\"]\l" ]
        155 [ label = "StreamExchange\lid: \"118\"\ldist: \"HashShard(t2.c)\"\l" ]
        156 [ label = "StreamTableScan\lid: \"13151\"\ltable: \"t2\"\lcolumns: [\"c\"]\l" ]
        157 [ label = "StreamProject\lid: \"128\"\lexprs: [\"t1.a\",\"t1.b\",\"t1.b\"]\l" ]
        158 [ label = "StreamHashJoin\lid: \"127\"\ltype: \"Inner\"\lpredicate: \"t1.a = t2.c\"\l" ]
        159 [ label = "StreamExchange\lid: \"125\"\ldist: \"HashShard(t1.a)\"\l" ]
        160 [ label = "StreamProject\lid: \"124\"\lexprs: [\"t1.a\",\"t1.b\"]\l" ]
        161 [ label = "StreamHashAgg\lid: \"123\"\lgroup_key: [\"t1.a\",\"t1.b\"]\laggs: [\"count\"]\l" ]
        162 [ label = "StreamExchange\lid: \"122\"\ldist: \"HashShard(t1.a, t1.b)\"\l" ]
        163 [ label = "StreamTableScan\lid: \"13161\"\ltable: \"t1\"\lcolumns: [\"a\",\"b\",\"_row_id\"]\l" ]
        164 [ label = "StreamExchange\lid: \"126\"\ldist: \"HashShard(t2.c)\"\l" ]
        165 [ label = "StreamTableScan\lid: \"13167\"\ltable: \"t2\"\lcolumns: [\"c\"]\l" ]
        166 [ label = "StreamProject\lid: \"136\"\lexprs: [\"t1.a\",\"t1.b\",\"t1.b\"]\l" ]
        167 [ label = "StreamHashJoin\lid: \"135\"\ltype: \"Inner\"\lpredicate: \"t1.a = t2.c\"\l" ]
        168 [ label = "StreamExchange\lid: \"133\"\ldist: \"HashShard(t1.a)\"\l" ]
        169 [ label = "StreamProject\lid: \"132\"\lexprs: [\"t1.a\",\"t1.b\"]\l" ]
        170 [ label = "StreamHashAgg\lid: \"131\"\lgroup_key: [\"t1.a\",\"t1.b\"]\laggs: [\"count\"]\l" ]
        171 [ label = "StreamExchange\lid: \"130\"\ldist: \"HashShard(t1.a, t1.b)\"\l" ]
        172 [ label = "StreamTableScan\lid: \"13177\"\ltable: \"t1\"\lcolumns: [\"a\",\"b\",\"_row_id\"]\l" ]
        173 [ label = "StreamExchange\lid: \"134\"\ldist: \"HashShard(t2.c)\"\l" ]
        174 [ label = "StreamTableScan\lid: \"13183\"\ltable: \"t2\"\lcolumns: [\"c\"]\l" ]
        175 [ label = "StreamProject\lid: \"144\"\lexprs: [\"t1.a\",\"t1.b\",\"t1.b\"]\l" ]
        176 [ label = "StreamHashJoin\lid: \"143\"\ltype: \"Inner\"\lpredicate: \"t1.a = t2.c\"\l" ]
        177 [ label = "StreamExchange\lid: \"141\"\ldist: \"HashShard(t1.a)\"\l" ]
        178 [ label = "StreamProject\lid: \"140\"\lexprs: [\"t1.a\",\"t1.b\"]\l" ]
        179 [ label = "StreamHashAgg\lid: \"139\"\lgroup_key: [\"t1.a\",\"t1.b\"]\laggs: [\"count\"]\l" ]
        180 [ label = "StreamExchange\lid: \"138\"\ldist: \"HashShard(t1.a, t1.b)\"\l" ]
        181 [ label = "StreamTableScan\lid: \"13193\"\ltable: \"t1\"\lcolumns: [\"a\",\"b\",\"_row_id\"]\l" ]
        182 [ label = "StreamExchange\lid: \"142\"\ldist: \"HashShard(t2.c)\"\l" ]
        183 [ label = "StreamTableScan\lid: \"13199\"\ltable: \"t2\"\lcolumns: [\"c\"]\l" ]
        0 -> 1 [ ]
        1 -> 2 [ ]
        2 -> 3 [ ]
        3 -> 4 [ ]
        4 -> 5 [ ]
        5 -> 6 [ ]
        6 -> 7 [ ]
        7 -> 8 [ ]
        8 -> 9 [ ]
        9 -> 10 [ ]
        10 -> 11 [ ]
        11 -> 12 [ ]
        12 -> 13 [ ]
        13 -> 14 [ ]
        14 -> 15 [ ]
        15 -> 16 [ ]
        16 -> 17 [ ]
        17 -> 18 [ ]
        18 -> 19 [ ]
        19 -> 20 [ ]
        20 -> 21 [ ]
        19 -> 22 [ ]
        22 -> 23 [ ]
        23 -> 24 [ ]
        24 -> 25 [ ]
        25 -> 26 [ ]
        26 -> 27 [ ]
        27 -> 28 [ ]
        23 -> 29 [ ]
        29 -> 30 [ ]
        18 -> 31 [ ]
        31 -> 32 [ ]
        32 -> 33 [ ]
        33 -> 34 [ ]
        34 -> 35 [ ]
        35 -> 36 [ ]
        36 -> 37 [ ]
        32 -> 38 [ ]
        38 -> 39 [ ]
        17 -> 40 [ ]
        40 -> 41 [ ]
        41 -> 42 [ ]
        42 -> 43 [ ]
        43 -> 44 [ ]
        44 -> 45 [ ]
        45 -> 46 [ ]
        41 -> 47 [ ]
        47 -> 48 [ ]
        16 -> 49 [ ]
        49 -> 50 [ ]
        50 -> 51 [ ]
        51 -> 52 [ ]
        52 -> 53 [ ]
        53 -> 54 [ ]
        54 -> 55 [ ]
        50 -> 56 [ ]
        56 -> 57 [ ]
        15 -> 58 [ ]
        58 -> 59 [ ]
        59 -> 60 [ ]
        60 -> 61 [ ]
        61 -> 62 [ ]
        62 -> 63 [ ]
        63 -> 64 [ ]
        59 -> 65 [ ]
        65 -> 66 [ ]
        14 -> 67 [ ]
        67 -> 68 [ ]
        68 -> 69 [ ]
        69 -> 70 [ ]
        70 -> 71 [ ]
        71 -> 72 [ ]
        72 -> 73 [ ]
        68 -> 74 [ ]
        74 -> 75 [ ]
        13 -> 76 [ ]
        76 -> 77 [ ]
        77 -> 78 [ ]
        78 -> 79 [ ]
        79 -> 80 [ ]
        80 -> 81 [ ]
        81 -> 82 [ ]
        77 -> 83 [ ]
        83 -> 84 [ ]
        12 -> 85 [ ]
        85 -> 86 [ ]
        86 -> 87 [ ]
        87 -> 88 [ ]
        88 -> 89 [ ]
        89 -> 90 [ ]
        90 -> 91 [ ]
        86 -> 92 [ ]
        92 -> 93 [ ]
        11 -> 94 [ ]
        94 -> 95 [ ]
        95 -> 96 [ ]
        96 -> 97 [ ]
        97 -> 98 [ ]
        98 -> 99 [ ]
        99 -> 100 [ ]
        95 -> 101 [ ]
        101 -> 102 [ ]
        10 -> 103 [ ]
        103 -> 104 [ ]
        104 -> 105 [ ]
        105 -> 106 [ ]
        106 -> 107 [ ]
        107 -> 108 [ ]
        108 -> 109 [ ]
        104 -> 110 [ ]
        110 -> 111 [ ]
        9 -> 112 [ ]
        112 -> 113 [ ]
        113 -> 114 [ ]
        114 -> 115 [ ]
        115 -> 116 [ ]
        116 -> 117 [ ]
        117 -> 118 [ ]
        113 -> 119 [ ]
        119 -> 120 [ ]
        8 -> 121 [ ]
        121 -> 122 [ ]
        122 -> 123 [ ]
        123 -> 124 [ ]
        124 -> 125 [ ]
        125 -> 126 [ ]
        126 -> 127 [ ]
        122 -> 128 [ ]
        128 -> 129 [ ]
        7 -> 130 [ ]
        130 -> 131 [ ]
        131 -> 132 [ ]
        132 -> 133 [ ]
        133 -> 134 [ ]
        134 -> 135 [ ]
        135 -> 136 [ ]
        131 -> 137 [ ]
        137 -> 138 [ ]
        6 -> 139 [ ]
        139 -> 140 [ ]
        140 -> 141 [ ]
        141 -> 142 [ ]
        142 -> 143 [ ]
        143 -> 144 [ ]
        144 -> 145 [ ]
        140 -> 146 [ ]
        146 -> 147 [ ]
        5 -> 148 [ ]
        148 -> 149 [ ]
        149 -> 150 [ ]
        150 -> 151 [ ]
        151 -> 152 [ ]
        152 -> 153 [ ]
        153 -> 154 [ ]
        149 -> 155 [ ]
        155 -> 156 [ ]
        4 -> 157 [ ]
        157 -> 158 [ ]
        158 -> 159 [ ]
        159 -> 160 [ ]
        160 -> 161 [ ]
        161 -> 162 [ ]
        162 -> 163 [ ]
        158 -> 164 [ ]
        164 -> 165 [ ]
        3 -> 166 [ ]
        166 -> 167 [ ]
        167 -> 168 [ ]
        168 -> 169 [ ]
        169 -> 170 [ ]
        170 -> 171 [ ]
        171 -> 172 [ ]
        167 -> 173 [ ]
        173 -> 174 [ ]
        2 -> 175 [ ]
        175 -> 176 [ ]
        176 -> 177 [ ]
        177 -> 178 [ ]
        178 -> 179 [ ]
        179 -> 180 [ ]
        180 -> 181 [ ]
        176 -> 182 [ ]
        182 -> 183 [ ]
    }
- name: test dot output format (distsql, stream)
  sql: |
    CREATE TABLE t (v1 int);
    explain (distsql, format dot) create materialized view m1 as SELECT approx_percentile(0.5) WITHIN GROUP (order by v1) from t;
  explain_output: |
    digraph {
        0 [ label = "Fragment: \lStreamFragment { fragment_id: 1, node: Some(StreamNode { operator_id: 10044, input: [StreamNode { operator_id: 1, input: [StreamNode { operator_id: 10049, input: [StreamNode { operator_id: 0, input: [], stream_key: [], append_only: false, identity: \"Upstream\", fields: [Field { data_type: Some(INT32), name: \"v1\" }, Field { data_type: Some(SERIAL), name: \"_row_id\" }], node_body: Some(Merge(MergeNode { upstream_actor_id: [], upstream_fragment_id: 0, upstream_dispatcher_type: Unspecified, fields: [] })) }, StreamNode { operator_id: 10048, input: [], stream_key: [], append_only: true, identity: \"BatchPlanNode\", fields: [Field { data_type: Some(INT32), name: \"v1\" }, Field { data_type: Some(SERIAL), name: \"_row_id\" }], node_body: Some(BatchPlan(BatchPlanNode { table_desc: Some(StorageTableDesc { table_id: 4, columns: [ColumnDesc { column_type: INT32, column_id: 1, name: \"v1\", version: 1 }, ColumnDesc { column_type: SERIAL, column_id: 0, name: \"_row_id\", version: 1 }, ColumnDesc { column_type: TIMESTAMPTZ, column_id: -1, name: \"_rw_timestamp\", version: 1 }], pk: [ColumnOrder { column_index: 1, order_type: Some(OrderType { direction: Ascending, nulls_are: Largest }) }], dist_key_in_pk_indices: [0], value_indices: [0, 1], read_prefix_len_hint: 1, versioned: true, stream_key: [1], vnode_col_idx_in_pk: None, retention_seconds: None, maybe_vnode_count: Some(256) }), column_ids: [1, 0] })) }], stream_key: [1], append_only: false, identity: \"StreamTableScan { table: t, columns: [v1, _row_id] }\", fields: [Field { data_type: Some(INT32), name: \"t.v1\" }, Field { data_type: Some(SERIAL), name: \"t._row_id\" }], node_body: Some(StreamScan(StreamScanNode { table_id: 4, upstream_column_ids: [1, 0], output_indices: [0, 1], stream_scan_type: ArrangementBackfill, state_table: Some(Table { id: 2, schema_id: 4294967294, database_id: 4294967294, name: \"\", columns: [ColumnCatalog { column_desc: Some(ColumnDesc { column_type: INT16, column_id: 0, name: \"vnode\", version: 1 }), is_hidden: false }, ColumnCatalog { column_desc: Some(ColumnDesc { column_type: SERIAL, column_id: 1, name: \"_row_id\", version: 1 }), is_hidden: false }, ColumnCatalog { column_desc: Some(ColumnDesc { column_type: BOOLEAN, column_id: 2, name: \"backfill_finished\", version: 1 }), is_hidden: false }, ColumnCatalog { column_desc: Some(ColumnDesc { column_type: INT64, column_id: 3, name: \"row_count\", version: 1 }), is_hidden: false }], pk: [ColumnOrder { column_index: 0, order_type: Some(OrderType { direction: Ascending, nulls_are: Largest }) }], dependent_relations: [], table_type: Internal, distribution_key: [0], stream_key: [], append_only: false, owner: 1, fragment_id: 4294967294, vnode_col_index: Some(0), row_id_index: None, value_indices: [1, 2, 3], definition: \"\", handle_pk_conflict_behavior: NoCheck, read_prefix_len_hint: 1, watermark_indices: [], dist_key_in_pk: [0], dml_fragment_id: None, cardinality: Some(Cardinality { lo: 0, hi: None }), initialized_at_epoch: None, created_at_epoch: None, cleaned_by_watermark: false, stream_job_status: Creating, create_type: Foreground, description: None, incoming_sinks: [], initialized_at_cluster_version: None, created_at_cluster_version: None, retention_seconds: None, version_column_index: None, cdc_table_id: None, maybe_vnode_count: Some(0), version: None, optional_associated_source_id: None }), table_desc: Some(StorageTableDesc { table_id: 4, columns: [ColumnDesc { column_type: INT32, column_id: 1, name: \"v1\", version: 1 }, ColumnDesc { column_type: SERIAL, column_id: 0, name: \"_row_id\", version: 1 }, ColumnDesc { column_type: TIMESTAMPTZ, column_id: -1, name: \"_rw_timestamp\", version: 1 }], pk: [ColumnOrder { column_index: 1, order_type: Some(OrderType { direction: Ascending, nulls_are: Largest }) }], dist_key_in_pk_indices: [0], value_indices: [0, 1], read_prefix_len_hint: 1, versioned: true, stream_key: [1], vnode_col_idx_in_pk: None, retention_seconds: None, maybe_vnode_count: Some(256) }), rate_limit: None, snapshot_read_barrier_interval: 0, arrangement_table: Some(Table { id: 4, schema_id: 4294967294, database_id: 4294967294, name: \"t\", columns: [ColumnCatalog { column_desc: Some(ColumnDesc { column_type: INT32, column_id: 1, name: \"v1\", version: 1 }), is_hidden: false }, ColumnCatalog { column_desc: Some(ColumnDesc { column_type: SERIAL, column_id: 0, name: \"_row_id\", version: 1 }), is_hidden: true }], pk: [ColumnOrder { column_index: 1, order_type: Some(OrderType { direction: Ascending, nulls_are: Largest }) }], dependent_relations: [], table_type: Table, distribution_key: [1], stream_key: [1], append_only: false, owner: 1, fragment_id: 4294967294, vnode_col_index: None, row_id_index: Some(1), value_indices: [0, 1], definition: \"CREATE TABLE t (v1 INT)\", handle_pk_conflict_behavior: Overwrite, read_prefix_len_hint: 1, watermark_indices: [], dist_key_in_pk: [], dml_fragment_id: None, cardinality: Some(Cardinality { lo: 0, hi: None }), initialized_at_epoch: None, created_at_epoch: None, cleaned_by_watermark: false, stream_job_status: Created, create_type: Foreground, description: None, incoming_sinks: [], initialized_at_cluster_version: None, created_at_cluster_version: None, retention_seconds: None, version_column_index: None, cdc_table_id: None, maybe_vnode_count: Some(256), version: Some(TableVersion { version: 0, next_column_id: 2 }), optional_associated_source_id: None }) })) }], stream_key: [1], append_only: false, identity: \"StreamProject { exprs: [t.v1::Float64 as $expr1, t._row_id] }\", fields: [Field { data_type: Some(DOUBLE), name: \"$expr1\" }, Field { data_type: Some(SERIAL), name: \"t._row_id\" }], node_body: Some(Project(ProjectNode { select_list: [ExprNode { function_type: Cast, return_type: Some(DOUBLE), rex_node: Some(FuncCall(FunctionCall { children: [ExprNode { function_type: Unspecified, return_type: Some(INT32), rex_node: Some(InputRef(0)) }] })) }, ExprNode { function_type: Unspecified, return_type: Some(SERIAL), rex_node: Some(InputRef(1)) }], watermark_input_cols: [], watermark_output_cols: [], nondecreasing_exprs: [], noop_update_hint: false })) }], stream_key: [1], append_only: false, identity: \"StreamLocalApproxPercentile { percentile_col: $expr1, quantile: 0.5:Float64, relative_error: 0.01:Float64 }\", fields: [Field { data_type: Some(INT16), name: \"sign\" }, Field { data_type: Some(INT32), name: \"bucket_id\" }, Field { data_type: Some(INT32), name: \"count\" }], node_body: Some(LocalApproxPercentile(LocalApproxPercentileNode { base: 1.02020202020202, percentile_index: 0 })) }), fragment_type_mask: 16, requires_singleton: false, table_ids_cnt: 0, upstream_table_ids: [4] }" ]
        1 [ label = "Fragment: \lStreamFragment { fragment_id: 0, node: Some(StreamNode { operator_id: 3, input: [StreamNode { operator_id: 10046, input: [StreamNode { operator_id: 2, input: [], stream_key: [1], append_only: false, identity: \"StreamExchange { dist: Single }\", fields: [Field { data_type: Some(INT16), name: \"sign\" }, Field { data_type: Some(INT32), name: \"bucket_id\" }, Field { data_type: Some(INT32), name: \"count\" }], node_body: Some(Exchange(ExchangeNode { strategy: Some(DispatchStrategy { r#type: Simple, dist_key_indices: [], output_indices: [0, 1, 2] }) })) }], stream_key: [], append_only: false, identity: \"StreamGlobalApproxPercentile { quantile: 0.5:Float64, relative_error: 0.01:Float64 }\", fields: [Field { data_type: Some(DOUBLE), name: \"approx_percentile\" }], node_body: Some(GlobalApproxPercentile(GlobalApproxPercentileNode { base: 1.02020202020202, quantile: 0.5, bucket_state_table: Some(Table { id: 0, schema_id: 4294967294, database_id: 4294967294, name: \"\", columns: [ColumnCatalog { column_desc: Some(ColumnDesc { column_type: INT16, column_id: 0, name: \"sign\", version: 1 }), is_hidden: false }, ColumnCatalog { column_desc: Some(ColumnDesc { column_type: INT32, column_id: 1, name: \"bucket_id\", version: 1 }), is_hidden: false }, ColumnCatalog { column_desc: Some(ColumnDesc { column_type: INT64, column_id: 2, name: \"count\", version: 1 }), is_hidden: false }], pk: [ColumnOrder { column_index: 0, order_type: Some(OrderType { direction: Ascending, nulls_are: Largest }) }, ColumnOrder { column_index: 1, order_type: Some(OrderType { direction: Ascending, nulls_are: Largest }) }], dependent_relations: [], table_type: Internal, distribution_key: [], stream_key: [], append_only: false, owner: 1, fragment_id: 4294967294, vnode_col_index: None, row_id_index: None, value_indices: [0, 1, 2], definition: \"\", handle_pk_conflict_behavior: NoCheck, read_prefix_len_hint: 0, watermark_indices: [], dist_key_in_pk: [], dml_fragment_id: None, cardinality: Some(Cardinality { lo: 0, hi: None }), initialized_at_epoch: None, created_at_epoch: None, cleaned_by_watermark: false, stream_job_status: Creating, create_type: Foreground, description: None, incoming_sinks: [], initialized_at_cluster_version: None, created_at_cluster_version: None, retention_seconds: None, version_column_index: None, cdc_table_id: None, maybe_vnode_count: Some(0), version: None, optional_associated_source_id: None }), count_state_table: Some(Table { id: 1, schema_id: 4294967294, database_id: 4294967294, name: \"\", columns: [ColumnCatalog { column_desc: Some(ColumnDesc { column_type: INT64, column_id: 0, name: \"total_count\", version: 1 }), is_hidden: false }], pk: [], dependent_relations: [], table_type: Internal, distribution_key: [], stream_key: [], append_only: false, owner: 1, fragment_id: 4294967294, vnode_col_index: None, row_id_index: None, value_indices: [0], definition: \"\", handle_pk_conflict_behavior: NoCheck, read_prefix_len_hint: 0, watermark_indices: [], dist_key_in_pk: [], dml_fragment_id: None, cardinality: Some(Cardinality { lo: 0, hi: None }), initialized_at_epoch: None, created_at_epoch: None, cleaned_by_watermark: false, stream_job_status: Creating, create_type: Foreground, description: None, incoming_sinks: [], initialized_at_cluster_version: None, created_at_cluster_version: None, retention_seconds: None, version_column_index: None, cdc_table_id: None, maybe_vnode_count: Some(0), version: None, optional_associated_source_id: None }) })) }], stream_key: [], append_only: false, identity: \"StreamMaterialize { columns: [approx_percentile], stream_key: [], pk_columns: [], pk_conflict: NoCheck }\", fields: [Field { data_type: Some(DOUBLE), name: \"approx_percentile\" }], node_body: Some(Materialize(MaterializeNode { table_id: 0, column_orders: [], table: Some(Table { id: 4294967294, schema_id: 4294967294, database_id: 4294967294, name: \"m1\", columns: [ColumnCatalog { column_desc: Some(ColumnDesc { column_type: DOUBLE, column_id: 1, name: \"approx_percentile\", version: 1 }), is_hidden: false }], pk: [], dependent_relations: [], table_type: MaterializedView, distribution_key: [], stream_key: [], append_only: false, owner: 1, fragment_id: 4294967294, vnode_col_index: None, row_id_index: None, value_indices: [0], definition: \"EXPLAIN CREATE MATERIALIZED VIEW m1 AS SELECT approx_percentile(0.5) WITHIN GROUP (ORDER BY v1) FROM t\", handle_pk_conflict_behavior: NoCheck, read_prefix_len_hint: 0, watermark_indices: [], dist_key_in_pk: [], dml_fragment_id: None, cardinality: Some(Cardinality { lo: 0, hi: Some(1) }), initialized_at_epoch: None, created_at_epoch: None, cleaned_by_watermark: false, stream_job_status: Creating, create_type: Foreground, description: None, incoming_sinks: [], initialized_at_cluster_version: None, created_at_cluster_version: None, retention_seconds: None, version_column_index: None, cdc_table_id: None, maybe_vnode_count: Some(0), version: None, optional_associated_source_id: None }) })) }), fragment_type_mask: 2, requires_singleton: false, table_ids_cnt: 0, upstream_table_ids: [] }" ]
        0 -> 1 [ label = "Edge ID: 2\l Dispacting strategy: Some(DispatchStrategy { r#type: Simple, dist_key_indices: [], output_indices: [0, 1, 2] })" ]
    }
